// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eckv.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		eckv.proto

	It has these top-level messages:
		ProposalNum
		PaxosLog
		PaxosState
		GetReq
		GetResp
		PutReq
		PutResp
		CASReq
		CVASReq
		CASResp
		ProposalMeta
		ProposalData
		Proposal
		ProposalResp
		PrepareReq
		PrepareResp
		AcceptReq
		AcceptResp
		LearnReq
		LearnResp
		LogReq
		LogResp
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProposalNum struct {
	Num int64  `protobuf:"varint,1,opt,name=num" json:"num"`
	Src uint32 `protobuf:"fixed32,2,opt,name=src" json:"src"`
	Del uint32 `protobuf:"fixed32,3,opt,name=del" json:"del"`
}

func (m *ProposalNum) Reset()                    { *m = ProposalNum{} }
func (m *ProposalNum) String() string            { return proto.CompactTextString(m) }
func (*ProposalNum) ProtoMessage()               {}
func (*ProposalNum) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{0} }

func (m *ProposalNum) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ProposalNum) GetSrc() uint32 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *ProposalNum) GetDel() uint32 {
	if m != nil {
		return m.Del
	}
	return 0
}

type PaxosLog struct {
	Versions []*PaxosState `protobuf:"bytes,1,rep,name=versions" json:"versions,omitempty"`
	MinVer   int64         `protobuf:"varint,2,opt,name=min_ver,json=minVer" json:"min_ver"`
	MaxVer   int64         `protobuf:"varint,3,opt,name=max_ver,json=maxVer" json:"max_ver"`
}

func (m *PaxosLog) Reset()                    { *m = PaxosLog{} }
func (m *PaxosLog) String() string            { return proto.CompactTextString(m) }
func (*PaxosLog) ProtoMessage()               {}
func (*PaxosLog) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{1} }

func (m *PaxosLog) GetVersions() []*PaxosState {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *PaxosLog) GetMinVer() int64 {
	if m != nil {
		return m.MinVer
	}
	return 0
}

func (m *PaxosLog) GetMaxVer() int64 {
	if m != nil {
		return m.MaxVer
	}
	return 0
}

type PaxosState struct {
	Ver             int64       `protobuf:"varint,1,opt,name=ver" json:"ver"`
	HighestPropNum  ProposalNum `protobuf:"bytes,2,opt,name=highest_prop_num,json=highestPropNum" json:"highest_prop_num"`
	AcceptedPropNum ProposalNum `protobuf:"bytes,3,opt,name=accepted_prop_num,json=acceptedPropNum" json:"accepted_prop_num"`
	AcceptedValId   uint64      `protobuf:"fixed64,4,opt,name=accepted_val_id,json=acceptedValId" json:"accepted_val_id"`
	AcceptedValLen  int64       `protobuf:"varint,5,opt,name=accepted_val_len,json=acceptedValLen" json:"accepted_val_len"`
	AcceptedChunks  [][]byte    `protobuf:"bytes,6,rep,name=accepted_chunks,json=acceptedChunks" json:"accepted_chunks,omitempty"`
	Chosen          bool        `protobuf:"varint,7,opt,name=chosen" json:"chosen"`
}

func (m *PaxosState) Reset()                    { *m = PaxosState{} }
func (m *PaxosState) String() string            { return proto.CompactTextString(m) }
func (*PaxosState) ProtoMessage()               {}
func (*PaxosState) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{2} }

func (m *PaxosState) GetVer() int64 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *PaxosState) GetHighestPropNum() ProposalNum {
	if m != nil {
		return m.HighestPropNum
	}
	return ProposalNum{}
}

func (m *PaxosState) GetAcceptedPropNum() ProposalNum {
	if m != nil {
		return m.AcceptedPropNum
	}
	return ProposalNum{}
}

func (m *PaxosState) GetAcceptedValId() uint64 {
	if m != nil {
		return m.AcceptedValId
	}
	return 0
}

func (m *PaxosState) GetAcceptedValLen() int64 {
	if m != nil {
		return m.AcceptedValLen
	}
	return 0
}

func (m *PaxosState) GetAcceptedChunks() [][]byte {
	if m != nil {
		return m.AcceptedChunks
	}
	return nil
}

func (m *PaxosState) GetChosen() bool {
	if m != nil {
		return m.Chosen
	}
	return false
}

type GetReq struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key"`
}

func (m *GetReq) Reset()                    { *m = GetReq{} }
func (m *GetReq) String() string            { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()               {}
func (*GetReq) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{3} }

func (m *GetReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetResp struct {
	Val []byte `protobuf:"bytes,2,opt,name=val" json:"val,omitempty"`
	Ver string `protobuf:"bytes,3,opt,name=ver" json:"ver"`
}

func (m *GetResp) Reset()                    { *m = GetResp{} }
func (m *GetResp) String() string            { return proto.CompactTextString(m) }
func (*GetResp) ProtoMessage()               {}
func (*GetResp) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{4} }

func (m *GetResp) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *GetResp) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

type PutReq struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key"`
	Val []byte `protobuf:"bytes,2,opt,name=val" json:"val,omitempty"`
}

func (m *PutReq) Reset()                    { *m = PutReq{} }
func (m *PutReq) String() string            { return proto.CompactTextString(m) }
func (*PutReq) ProtoMessage()               {}
func (*PutReq) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{5} }

func (m *PutReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PutReq) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

type PutResp struct {
	Ver string `protobuf:"bytes,1,opt,name=ver" json:"ver"`
}

func (m *PutResp) Reset()                    { *m = PutResp{} }
func (m *PutResp) String() string            { return proto.CompactTextString(m) }
func (*PutResp) ProtoMessage()               {}
func (*PutResp) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{6} }

func (m *PutResp) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

type CASReq struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key"`
	New []byte `protobuf:"bytes,2,opt,name=new" json:"new,omitempty"`
	Old []byte `protobuf:"bytes,3,opt,name=old" json:"old,omitempty"`
}

func (m *CASReq) Reset()                    { *m = CASReq{} }
func (m *CASReq) String() string            { return proto.CompactTextString(m) }
func (*CASReq) ProtoMessage()               {}
func (*CASReq) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{7} }

func (m *CASReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CASReq) GetNew() []byte {
	if m != nil {
		return m.New
	}
	return nil
}

func (m *CASReq) GetOld() []byte {
	if m != nil {
		return m.Old
	}
	return nil
}

type CVASReq struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key"`
	New []byte `protobuf:"bytes,2,opt,name=new" json:"new,omitempty"`
	Ver string `protobuf:"bytes,3,opt,name=ver" json:"ver"`
}

func (m *CVASReq) Reset()                    { *m = CVASReq{} }
func (m *CVASReq) String() string            { return proto.CompactTextString(m) }
func (*CVASReq) ProtoMessage()               {}
func (*CVASReq) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{8} }

func (m *CVASReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CVASReq) GetNew() []byte {
	if m != nil {
		return m.New
	}
	return nil
}

func (m *CVASReq) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

type CASResp struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success"`
	Ver     string `protobuf:"bytes,2,opt,name=ver" json:"ver"`
}

func (m *CASResp) Reset()                    { *m = CASResp{} }
func (m *CASResp) String() string            { return proto.CompactTextString(m) }
func (*CASResp) ProtoMessage()               {}
func (*CASResp) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{9} }

func (m *CASResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CASResp) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

type ProposalMeta struct {
	NumMesgDelays uint32 `protobuf:"varint,1,opt,name=num_mesg_delays,json=numMesgDelays" json:"num_mesg_delays"`
}

func (m *ProposalMeta) Reset()                    { *m = ProposalMeta{} }
func (m *ProposalMeta) String() string            { return proto.CompactTextString(m) }
func (*ProposalMeta) ProtoMessage()               {}
func (*ProposalMeta) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{10} }

func (m *ProposalMeta) GetNumMesgDelays() uint32 {
	if m != nil {
		return m.NumMesgDelays
	}
	return 0
}

type ProposalData struct {
	OrigVal     []byte `protobuf:"bytes,1,opt,name=orig_val,json=origVal" json:"orig_val,omitempty"`
	OrigValId   uint64 `protobuf:"fixed64,2,opt,name=orig_val_id,json=origValId" json:"orig_val_id"`
	ActualVal   []byte `protobuf:"bytes,3,opt,name=actual_val,json=actualVal" json:"actual_val,omitempty"`
	ActualValId uint64 `protobuf:"fixed64,4,opt,name=actual_val_id,json=actualValId" json:"actual_val_id"`
	Present     bool   `protobuf:"varint,5,opt,name=present" json:"present"`
	SendLogs    bool   `protobuf:"varint,6,opt,name=send_logs,json=sendLogs" json:"send_logs"`
	GcIfSucc    bool   `protobuf:"varint,7,opt,name=gc_if_succ,json=gcIfSucc" json:"gc_if_succ"`
}

func (m *ProposalData) Reset()                    { *m = ProposalData{} }
func (m *ProposalData) String() string            { return proto.CompactTextString(m) }
func (*ProposalData) ProtoMessage()               {}
func (*ProposalData) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{11} }

func (m *ProposalData) GetOrigVal() []byte {
	if m != nil {
		return m.OrigVal
	}
	return nil
}

func (m *ProposalData) GetOrigValId() uint64 {
	if m != nil {
		return m.OrigValId
	}
	return 0
}

func (m *ProposalData) GetActualVal() []byte {
	if m != nil {
		return m.ActualVal
	}
	return nil
}

func (m *ProposalData) GetActualValId() uint64 {
	if m != nil {
		return m.ActualValId
	}
	return 0
}

func (m *ProposalData) GetPresent() bool {
	if m != nil {
		return m.Present
	}
	return false
}

func (m *ProposalData) GetSendLogs() bool {
	if m != nil {
		return m.SendLogs
	}
	return false
}

func (m *ProposalData) GetGcIfSucc() bool {
	if m != nil {
		return m.GcIfSucc
	}
	return false
}

type Proposal struct {
	Key          string `protobuf:"bytes,1,opt,name=key" json:"key"`
	Ver          int64  `protobuf:"varint,2,opt,name=ver" json:"ver"`
	Val          []byte `protobuf:"bytes,3,opt,name=val" json:"val,omitempty"`
	StartPropNum int64  `protobuf:"varint,4,opt,name=start_prop_num,json=startPropNum" json:"start_prop_num"`
	SendLogs     bool   `protobuf:"varint,5,opt,name=send_logs,json=sendLogs" json:"send_logs"`
	GcIfSucc     bool   `protobuf:"varint,6,opt,name=gc_if_succ,json=gcIfSucc" json:"gc_if_succ"`
}

func (m *Proposal) Reset()                    { *m = Proposal{} }
func (m *Proposal) String() string            { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()               {}
func (*Proposal) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{12} }

func (m *Proposal) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Proposal) GetVer() int64 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *Proposal) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *Proposal) GetStartPropNum() int64 {
	if m != nil {
		return m.StartPropNum
	}
	return 0
}

func (m *Proposal) GetSendLogs() bool {
	if m != nil {
		return m.SendLogs
	}
	return false
}

func (m *Proposal) GetGcIfSucc() bool {
	if m != nil {
		return m.GcIfSucc
	}
	return false
}

type ProposalResp struct {
	ActualVal []byte       `protobuf:"bytes,1,opt,name=actual_val,json=actualVal" json:"actual_val,omitempty"`
	DidGc     bool         `protobuf:"varint,2,opt,name=did_gc,json=didGc" json:"did_gc"`
	Logs      []PaxosLog   `protobuf:"bytes,3,rep,name=logs" json:"logs"`
	LogRepls  []uint32     `protobuf:"varint,4,rep,name=log_repls,json=logRepls" json:"log_repls,omitempty"`
	Meta      ProposalMeta `protobuf:"bytes,5,opt,name=meta" json:"meta"`
}

func (m *ProposalResp) Reset()                    { *m = ProposalResp{} }
func (m *ProposalResp) String() string            { return proto.CompactTextString(m) }
func (*ProposalResp) ProtoMessage()               {}
func (*ProposalResp) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{13} }

func (m *ProposalResp) GetActualVal() []byte {
	if m != nil {
		return m.ActualVal
	}
	return nil
}

func (m *ProposalResp) GetDidGc() bool {
	if m != nil {
		return m.DidGc
	}
	return false
}

func (m *ProposalResp) GetLogs() []PaxosLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *ProposalResp) GetLogRepls() []uint32 {
	if m != nil {
		return m.LogRepls
	}
	return nil
}

func (m *ProposalResp) GetMeta() ProposalMeta {
	if m != nil {
		return m.Meta
	}
	return ProposalMeta{}
}

type PrepareReq struct {
	Key      string       `protobuf:"bytes,1,opt,name=key" json:"key"`
	Ver      int64        `protobuf:"varint,2,opt,name=ver" json:"ver"`
	PropNum  ProposalNum  `protobuf:"bytes,3,opt,name=prop_num,json=propNum" json:"prop_num"`
	PropData ProposalData `protobuf:"bytes,4,opt,name=prop_data,json=propData" json:"prop_data"`
	Meta     ProposalMeta `protobuf:"bytes,5,opt,name=meta" json:"meta"`
}

func (m *PrepareReq) Reset()                    { *m = PrepareReq{} }
func (m *PrepareReq) String() string            { return proto.CompactTextString(m) }
func (*PrepareReq) ProtoMessage()               {}
func (*PrepareReq) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{14} }

func (m *PrepareReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PrepareReq) GetVer() int64 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *PrepareReq) GetPropNum() ProposalNum {
	if m != nil {
		return m.PropNum
	}
	return ProposalNum{}
}

func (m *PrepareReq) GetPropData() ProposalData {
	if m != nil {
		return m.PropData
	}
	return ProposalData{}
}

func (m *PrepareReq) GetMeta() ProposalMeta {
	if m != nil {
		return m.Meta
	}
	return ProposalMeta{}
}

type PrepareResp struct {
	Key     string      `protobuf:"bytes,1,opt,name=key" json:"key"`
	Ver     int64       `protobuf:"varint,2,opt,name=ver" json:"ver"`
	PropNum ProposalNum `protobuf:"bytes,3,opt,name=prop_num,json=propNum" json:"prop_num"`
	Success bool        `protobuf:"varint,4,opt,name=success" json:"success"`
	// promise args
	AcceptedPropNum ProposalNum `protobuf:"bytes,5,opt,name=accepted_prop_num,json=acceptedPropNum" json:"accepted_prop_num"`
	AcceptedValId   uint64      `protobuf:"fixed64,6,opt,name=accepted_val_id,json=acceptedValId" json:"accepted_val_id"`
	AcceptedValLen  int64       `protobuf:"varint,7,opt,name=accepted_val_len,json=acceptedValLen" json:"accepted_val_len"`
	AcceptedChunks  [][]byte    `protobuf:"bytes,8,rep,name=accepted_chunks,json=acceptedChunks" json:"accepted_chunks,omitempty"`
	// failed args
	HighestPropNum ProposalNum  `protobuf:"bytes,9,opt,name=highest_prop_num,json=highestPropNum" json:"highest_prop_num"`
	DidGc          bool         `protobuf:"varint,10,opt,name=did_gc,json=didGc" json:"did_gc"`
	PropData       ProposalData `protobuf:"bytes,11,opt,name=prop_data,json=propData" json:"prop_data"`
	Meta           ProposalMeta `protobuf:"bytes,12,opt,name=meta" json:"meta"`
}

func (m *PrepareResp) Reset()                    { *m = PrepareResp{} }
func (m *PrepareResp) String() string            { return proto.CompactTextString(m) }
func (*PrepareResp) ProtoMessage()               {}
func (*PrepareResp) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{15} }

func (m *PrepareResp) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PrepareResp) GetVer() int64 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *PrepareResp) GetPropNum() ProposalNum {
	if m != nil {
		return m.PropNum
	}
	return ProposalNum{}
}

func (m *PrepareResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PrepareResp) GetAcceptedPropNum() ProposalNum {
	if m != nil {
		return m.AcceptedPropNum
	}
	return ProposalNum{}
}

func (m *PrepareResp) GetAcceptedValId() uint64 {
	if m != nil {
		return m.AcceptedValId
	}
	return 0
}

func (m *PrepareResp) GetAcceptedValLen() int64 {
	if m != nil {
		return m.AcceptedValLen
	}
	return 0
}

func (m *PrepareResp) GetAcceptedChunks() [][]byte {
	if m != nil {
		return m.AcceptedChunks
	}
	return nil
}

func (m *PrepareResp) GetHighestPropNum() ProposalNum {
	if m != nil {
		return m.HighestPropNum
	}
	return ProposalNum{}
}

func (m *PrepareResp) GetDidGc() bool {
	if m != nil {
		return m.DidGc
	}
	return false
}

func (m *PrepareResp) GetPropData() ProposalData {
	if m != nil {
		return m.PropData
	}
	return ProposalData{}
}

func (m *PrepareResp) GetMeta() ProposalMeta {
	if m != nil {
		return m.Meta
	}
	return ProposalMeta{}
}

type AcceptReq struct {
	Key      string       `protobuf:"bytes,1,opt,name=key" json:"key"`
	Ver      int64        `protobuf:"varint,2,opt,name=ver" json:"ver"`
	PropNum  ProposalNum  `protobuf:"bytes,3,opt,name=prop_num,json=propNum" json:"prop_num"`
	ValId    uint64       `protobuf:"fixed64,4,opt,name=val_id,json=valId" json:"val_id"`
	ValLen   int64        `protobuf:"varint,5,opt,name=val_len,json=valLen" json:"val_len"`
	Chunks   [][]byte     `protobuf:"bytes,6,rep,name=chunks" json:"chunks,omitempty"`
	SendLog  bool         `protobuf:"varint,7,opt,name=send_log,json=sendLog" json:"send_log"`
	PropData ProposalData `protobuf:"bytes,8,opt,name=prop_data,json=propData" json:"prop_data"`
	Meta     ProposalMeta `protobuf:"bytes,9,opt,name=meta" json:"meta"`
}

func (m *AcceptReq) Reset()                    { *m = AcceptReq{} }
func (m *AcceptReq) String() string            { return proto.CompactTextString(m) }
func (*AcceptReq) ProtoMessage()               {}
func (*AcceptReq) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{16} }

func (m *AcceptReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AcceptReq) GetVer() int64 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *AcceptReq) GetPropNum() ProposalNum {
	if m != nil {
		return m.PropNum
	}
	return ProposalNum{}
}

func (m *AcceptReq) GetValId() uint64 {
	if m != nil {
		return m.ValId
	}
	return 0
}

func (m *AcceptReq) GetValLen() int64 {
	if m != nil {
		return m.ValLen
	}
	return 0
}

func (m *AcceptReq) GetChunks() [][]byte {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func (m *AcceptReq) GetSendLog() bool {
	if m != nil {
		return m.SendLog
	}
	return false
}

func (m *AcceptReq) GetPropData() ProposalData {
	if m != nil {
		return m.PropData
	}
	return ProposalData{}
}

func (m *AcceptReq) GetMeta() ProposalMeta {
	if m != nil {
		return m.Meta
	}
	return ProposalMeta{}
}

type AcceptResp struct {
	Key             string      `protobuf:"bytes,1,opt,name=key" json:"key"`
	Ver             int64       `protobuf:"varint,2,opt,name=ver" json:"ver"`
	PropNum         ProposalNum `protobuf:"bytes,3,opt,name=prop_num,json=propNum" json:"prop_num"`
	Success         bool        `protobuf:"varint,4,opt,name=success" json:"success"`
	AcceptedPropNum ProposalNum `protobuf:"bytes,5,opt,name=accepted_prop_num,json=acceptedPropNum" json:"accepted_prop_num"`
	Log             PaxosLog    `protobuf:"bytes,6,opt,name=log" json:"log"`
	// failed args
	HighestPropNum ProposalNum  `protobuf:"bytes,7,opt,name=highest_prop_num,json=highestPropNum" json:"highest_prop_num"`
	DidGc          bool         `protobuf:"varint,8,opt,name=did_gc,json=didGc" json:"did_gc"`
	PropData       ProposalData `protobuf:"bytes,9,opt,name=prop_data,json=propData" json:"prop_data"`
	Meta           ProposalMeta `protobuf:"bytes,10,opt,name=meta" json:"meta"`
	PrepareFailed  bool         `protobuf:"varint,11,opt,name=prepare_failed,json=prepareFailed" json:"prepare_failed"`
}

func (m *AcceptResp) Reset()                    { *m = AcceptResp{} }
func (m *AcceptResp) String() string            { return proto.CompactTextString(m) }
func (*AcceptResp) ProtoMessage()               {}
func (*AcceptResp) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{17} }

func (m *AcceptResp) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AcceptResp) GetVer() int64 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *AcceptResp) GetPropNum() ProposalNum {
	if m != nil {
		return m.PropNum
	}
	return ProposalNum{}
}

func (m *AcceptResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AcceptResp) GetAcceptedPropNum() ProposalNum {
	if m != nil {
		return m.AcceptedPropNum
	}
	return ProposalNum{}
}

func (m *AcceptResp) GetLog() PaxosLog {
	if m != nil {
		return m.Log
	}
	return PaxosLog{}
}

func (m *AcceptResp) GetHighestPropNum() ProposalNum {
	if m != nil {
		return m.HighestPropNum
	}
	return ProposalNum{}
}

func (m *AcceptResp) GetDidGc() bool {
	if m != nil {
		return m.DidGc
	}
	return false
}

func (m *AcceptResp) GetPropData() ProposalData {
	if m != nil {
		return m.PropData
	}
	return ProposalData{}
}

func (m *AcceptResp) GetMeta() ProposalMeta {
	if m != nil {
		return m.Meta
	}
	return ProposalMeta{}
}

func (m *AcceptResp) GetPrepareFailed() bool {
	if m != nil {
		return m.PrepareFailed
	}
	return false
}

type LearnReq struct {
	Key             string      `protobuf:"bytes,1,opt,name=key" json:"key"`
	Ver             int64       `protobuf:"varint,2,opt,name=ver" json:"ver"`
	AcceptedPropNum ProposalNum `protobuf:"bytes,3,opt,name=accepted_prop_num,json=acceptedPropNum" json:"accepted_prop_num"`
	AcceptedValId   uint64      `protobuf:"fixed64,4,opt,name=accepted_val_id,json=acceptedValId" json:"accepted_val_id"`
	AcceptedValLen  int64       `protobuf:"varint,5,opt,name=accepted_val_len,json=acceptedValLen" json:"accepted_val_len"`
	AcceptedChunks  [][]byte    `protobuf:"bytes,6,rep,name=accepted_chunks,json=acceptedChunks" json:"accepted_chunks,omitempty"`
	MinKeepVer      int64       `protobuf:"varint,7,opt,name=min_keep_ver,json=minKeepVer" json:"min_keep_ver"`
}

func (m *LearnReq) Reset()                    { *m = LearnReq{} }
func (m *LearnReq) String() string            { return proto.CompactTextString(m) }
func (*LearnReq) ProtoMessage()               {}
func (*LearnReq) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{18} }

func (m *LearnReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LearnReq) GetVer() int64 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *LearnReq) GetAcceptedPropNum() ProposalNum {
	if m != nil {
		return m.AcceptedPropNum
	}
	return ProposalNum{}
}

func (m *LearnReq) GetAcceptedValId() uint64 {
	if m != nil {
		return m.AcceptedValId
	}
	return 0
}

func (m *LearnReq) GetAcceptedValLen() int64 {
	if m != nil {
		return m.AcceptedValLen
	}
	return 0
}

func (m *LearnReq) GetAcceptedChunks() [][]byte {
	if m != nil {
		return m.AcceptedChunks
	}
	return nil
}

func (m *LearnReq) GetMinKeepVer() int64 {
	if m != nil {
		return m.MinKeepVer
	}
	return 0
}

type LearnResp struct {
}

func (m *LearnResp) Reset()                    { *m = LearnResp{} }
func (m *LearnResp) String() string            { return proto.CompactTextString(m) }
func (*LearnResp) ProtoMessage()               {}
func (*LearnResp) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{19} }

type LogReq struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key"`
}

func (m *LogReq) Reset()                    { *m = LogReq{} }
func (m *LogReq) String() string            { return proto.CompactTextString(m) }
func (*LogReq) ProtoMessage()               {}
func (*LogReq) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{20} }

func (m *LogReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type LogResp struct {
	Log PaxosLog `protobuf:"bytes,1,opt,name=log" json:"log"`
}

func (m *LogResp) Reset()                    { *m = LogResp{} }
func (m *LogResp) String() string            { return proto.CompactTextString(m) }
func (*LogResp) ProtoMessage()               {}
func (*LogResp) Descriptor() ([]byte, []int) { return fileDescriptorEckv, []int{21} }

func (m *LogResp) GetLog() PaxosLog {
	if m != nil {
		return m.Log
	}
	return PaxosLog{}
}

func init() {
	proto.RegisterType((*ProposalNum)(nil), "eckv.ProposalNum")
	proto.RegisterType((*PaxosLog)(nil), "eckv.PaxosLog")
	proto.RegisterType((*PaxosState)(nil), "eckv.PaxosState")
	proto.RegisterType((*GetReq)(nil), "eckv.GetReq")
	proto.RegisterType((*GetResp)(nil), "eckv.GetResp")
	proto.RegisterType((*PutReq)(nil), "eckv.PutReq")
	proto.RegisterType((*PutResp)(nil), "eckv.PutResp")
	proto.RegisterType((*CASReq)(nil), "eckv.CASReq")
	proto.RegisterType((*CVASReq)(nil), "eckv.CVASReq")
	proto.RegisterType((*CASResp)(nil), "eckv.CASResp")
	proto.RegisterType((*ProposalMeta)(nil), "eckv.ProposalMeta")
	proto.RegisterType((*ProposalData)(nil), "eckv.ProposalData")
	proto.RegisterType((*Proposal)(nil), "eckv.Proposal")
	proto.RegisterType((*ProposalResp)(nil), "eckv.ProposalResp")
	proto.RegisterType((*PrepareReq)(nil), "eckv.PrepareReq")
	proto.RegisterType((*PrepareResp)(nil), "eckv.PrepareResp")
	proto.RegisterType((*AcceptReq)(nil), "eckv.AcceptReq")
	proto.RegisterType((*AcceptResp)(nil), "eckv.AcceptResp")
	proto.RegisterType((*LearnReq)(nil), "eckv.LearnReq")
	proto.RegisterType((*LearnResp)(nil), "eckv.LearnResp")
	proto.RegisterType((*LogReq)(nil), "eckv.LogReq")
	proto.RegisterType((*LogResp)(nil), "eckv.LogResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ECKV service

type ECKVClient interface {
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutResp, error)
	CAS(ctx context.Context, in *CASReq, opts ...grpc.CallOption) (*CASResp, error)
	CVAS(ctx context.Context, in *CVASReq, opts ...grpc.CallOption) (*CASResp, error)
}

type eCKVClient struct {
	cc *grpc.ClientConn
}

func NewECKVClient(cc *grpc.ClientConn) ECKVClient {
	return &eCKVClient{cc}
}

func (c *eCKVClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := grpc.Invoke(ctx, "/eckv.ECKV/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCKVClient) Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutResp, error) {
	out := new(PutResp)
	err := grpc.Invoke(ctx, "/eckv.ECKV/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCKVClient) CAS(ctx context.Context, in *CASReq, opts ...grpc.CallOption) (*CASResp, error) {
	out := new(CASResp)
	err := grpc.Invoke(ctx, "/eckv.ECKV/CAS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCKVClient) CVAS(ctx context.Context, in *CVASReq, opts ...grpc.CallOption) (*CASResp, error) {
	out := new(CASResp)
	err := grpc.Invoke(ctx, "/eckv.ECKV/CVAS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ECKV service

type ECKVServer interface {
	Get(context.Context, *GetReq) (*GetResp, error)
	Put(context.Context, *PutReq) (*PutResp, error)
	CAS(context.Context, *CASReq) (*CASResp, error)
	CVAS(context.Context, *CVASReq) (*CASResp, error)
}

func RegisterECKVServer(s *grpc.Server, srv ECKVServer) {
	s.RegisterService(&_ECKV_serviceDesc, srv)
}

func _ECKV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECKVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eckv.ECKV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECKVServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECKV_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECKVServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eckv.ECKV/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECKVServer).Put(ctx, req.(*PutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECKV_CAS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CASReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECKVServer).CAS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eckv.ECKV/CAS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECKVServer).CAS(ctx, req.(*CASReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECKV_CVAS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CVASReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECKVServer).CVAS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eckv.ECKV/CVAS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECKVServer).CVAS(ctx, req.(*CVASReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ECKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eckv.ECKV",
	HandlerType: (*ECKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ECKV_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _ECKV_Put_Handler,
		},
		{
			MethodName: "CAS",
			Handler:    _ECKV_CAS_Handler,
		},
		{
			MethodName: "CVAS",
			Handler:    _ECKV_CVAS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eckv.proto",
}

func (m *ProposalNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalNum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Num))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Eckv(dAtA, i, uint32(m.Src))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Eckv(dAtA, i, uint32(m.Del))
	return i, nil
}

func (m *PaxosLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaxosLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for _, msg := range m.Versions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEckv(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.MinVer))
	dAtA[i] = 0x18
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.MaxVer))
	return i, nil
}

func (m *PaxosState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaxosState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Ver))
	dAtA[i] = 0x12
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.HighestPropNum.Size()))
	n1, err := m.HighestPropNum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.AcceptedPropNum.Size()))
	n2, err := m.AcceptedPropNum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x21
	i++
	i = encodeFixed64Eckv(dAtA, i, uint64(m.AcceptedValId))
	dAtA[i] = 0x28
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.AcceptedValLen))
	if len(m.AcceptedChunks) > 0 {
		for _, b := range m.AcceptedChunks {
			dAtA[i] = 0x32
			i++
			i = encodeVarintEckv(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	dAtA[i] = 0x38
	i++
	if m.Chosen {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *GetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	return i, nil
}

func (m *GetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Val != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEckv(dAtA, i, uint64(len(m.Val)))
		i += copy(dAtA[i:], m.Val)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Ver)))
	i += copy(dAtA[i:], m.Ver)
	return i, nil
}

func (m *PutReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	if m.Val != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEckv(dAtA, i, uint64(len(m.Val)))
		i += copy(dAtA[i:], m.Val)
	}
	return i, nil
}

func (m *PutResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Ver)))
	i += copy(dAtA[i:], m.Ver)
	return i, nil
}

func (m *CASReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CASReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	if m.New != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEckv(dAtA, i, uint64(len(m.New)))
		i += copy(dAtA[i:], m.New)
	}
	if m.Old != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEckv(dAtA, i, uint64(len(m.Old)))
		i += copy(dAtA[i:], m.Old)
	}
	return i, nil
}

func (m *CVASReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CVASReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	if m.New != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEckv(dAtA, i, uint64(len(m.New)))
		i += copy(dAtA[i:], m.New)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Ver)))
	i += copy(dAtA[i:], m.Ver)
	return i, nil
}

func (m *CASResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CASResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Success {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x12
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Ver)))
	i += copy(dAtA[i:], m.Ver)
	return i, nil
}

func (m *ProposalMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.NumMesgDelays))
	return i, nil
}

func (m *ProposalData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrigVal != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEckv(dAtA, i, uint64(len(m.OrigVal)))
		i += copy(dAtA[i:], m.OrigVal)
	}
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Eckv(dAtA, i, uint64(m.OrigValId))
	if m.ActualVal != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEckv(dAtA, i, uint64(len(m.ActualVal)))
		i += copy(dAtA[i:], m.ActualVal)
	}
	dAtA[i] = 0x21
	i++
	i = encodeFixed64Eckv(dAtA, i, uint64(m.ActualValId))
	dAtA[i] = 0x28
	i++
	if m.Present {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x30
	i++
	if m.SendLogs {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x38
	i++
	if m.GcIfSucc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x10
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Ver))
	if m.Val != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEckv(dAtA, i, uint64(len(m.Val)))
		i += copy(dAtA[i:], m.Val)
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.StartPropNum))
	dAtA[i] = 0x28
	i++
	if m.SendLogs {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x30
	i++
	if m.GcIfSucc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *ProposalResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActualVal != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEckv(dAtA, i, uint64(len(m.ActualVal)))
		i += copy(dAtA[i:], m.ActualVal)
	}
	dAtA[i] = 0x10
	i++
	if m.DidGc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintEckv(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LogRepls) > 0 {
		for _, num := range m.LogRepls {
			dAtA[i] = 0x20
			i++
			i = encodeVarintEckv(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Meta.Size()))
	n3, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *PrepareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x10
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Ver))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.PropNum.Size()))
	n4, err := m.PropNum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.PropData.Size()))
	n5, err := m.PropData.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Meta.Size()))
	n6, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *PrepareResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x10
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Ver))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.PropNum.Size()))
	n7, err := m.PropNum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x20
	i++
	if m.Success {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.AcceptedPropNum.Size()))
	n8, err := m.AcceptedPropNum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x31
	i++
	i = encodeFixed64Eckv(dAtA, i, uint64(m.AcceptedValId))
	dAtA[i] = 0x38
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.AcceptedValLen))
	if len(m.AcceptedChunks) > 0 {
		for _, b := range m.AcceptedChunks {
			dAtA[i] = 0x42
			i++
			i = encodeVarintEckv(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.HighestPropNum.Size()))
	n9, err := m.HighestPropNum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x50
	i++
	if m.DidGc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x5a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.PropData.Size()))
	n10, err := m.PropData.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x62
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Meta.Size()))
	n11, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func (m *AcceptReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x10
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Ver))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.PropNum.Size()))
	n12, err := m.PropNum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x21
	i++
	i = encodeFixed64Eckv(dAtA, i, uint64(m.ValId))
	dAtA[i] = 0x28
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.ValLen))
	if len(m.Chunks) > 0 {
		for _, b := range m.Chunks {
			dAtA[i] = 0x32
			i++
			i = encodeVarintEckv(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	dAtA[i] = 0x38
	i++
	if m.SendLog {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x42
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.PropData.Size()))
	n13, err := m.PropData.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x4a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Meta.Size()))
	n14, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *AcceptResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x10
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Ver))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.PropNum.Size()))
	n15, err := m.PropNum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x20
	i++
	if m.Success {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.AcceptedPropNum.Size()))
	n16, err := m.AcceptedPropNum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x32
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Log.Size()))
	n17, err := m.Log.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x3a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.HighestPropNum.Size()))
	n18, err := m.HighestPropNum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x40
	i++
	if m.DidGc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x4a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.PropData.Size()))
	n19, err := m.PropData.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x52
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Meta.Size()))
	n20, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	dAtA[i] = 0x58
	i++
	if m.PrepareFailed {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *LearnReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LearnReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x10
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Ver))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.AcceptedPropNum.Size()))
	n21, err := m.AcceptedPropNum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x21
	i++
	i = encodeFixed64Eckv(dAtA, i, uint64(m.AcceptedValId))
	dAtA[i] = 0x28
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.AcceptedValLen))
	if len(m.AcceptedChunks) > 0 {
		for _, b := range m.AcceptedChunks {
			dAtA[i] = 0x32
			i++
			i = encodeVarintEckv(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.MinKeepVer))
	return i, nil
}

func (m *LearnResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LearnResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	return i, nil
}

func (m *LogResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEckv(dAtA, i, uint64(m.Log.Size()))
	n22, err := m.Log.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	return i, nil
}

func encodeFixed64Eckv(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Eckv(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEckv(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProposalNum) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovEckv(uint64(m.Num))
	n += 5
	n += 5
	return n
}

func (m *PaxosLog) Size() (n int) {
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for _, e := range m.Versions {
			l = e.Size()
			n += 1 + l + sovEckv(uint64(l))
		}
	}
	n += 1 + sovEckv(uint64(m.MinVer))
	n += 1 + sovEckv(uint64(m.MaxVer))
	return n
}

func (m *PaxosState) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovEckv(uint64(m.Ver))
	l = m.HighestPropNum.Size()
	n += 1 + l + sovEckv(uint64(l))
	l = m.AcceptedPropNum.Size()
	n += 1 + l + sovEckv(uint64(l))
	n += 9
	n += 1 + sovEckv(uint64(m.AcceptedValLen))
	if len(m.AcceptedChunks) > 0 {
		for _, b := range m.AcceptedChunks {
			l = len(b)
			n += 1 + l + sovEckv(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *GetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovEckv(uint64(l))
	return n
}

func (m *GetResp) Size() (n int) {
	var l int
	_ = l
	if m.Val != nil {
		l = len(m.Val)
		n += 1 + l + sovEckv(uint64(l))
	}
	l = len(m.Ver)
	n += 1 + l + sovEckv(uint64(l))
	return n
}

func (m *PutReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovEckv(uint64(l))
	if m.Val != nil {
		l = len(m.Val)
		n += 1 + l + sovEckv(uint64(l))
	}
	return n
}

func (m *PutResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ver)
	n += 1 + l + sovEckv(uint64(l))
	return n
}

func (m *CASReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovEckv(uint64(l))
	if m.New != nil {
		l = len(m.New)
		n += 1 + l + sovEckv(uint64(l))
	}
	if m.Old != nil {
		l = len(m.Old)
		n += 1 + l + sovEckv(uint64(l))
	}
	return n
}

func (m *CVASReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovEckv(uint64(l))
	if m.New != nil {
		l = len(m.New)
		n += 1 + l + sovEckv(uint64(l))
	}
	l = len(m.Ver)
	n += 1 + l + sovEckv(uint64(l))
	return n
}

func (m *CASResp) Size() (n int) {
	var l int
	_ = l
	n += 2
	l = len(m.Ver)
	n += 1 + l + sovEckv(uint64(l))
	return n
}

func (m *ProposalMeta) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovEckv(uint64(m.NumMesgDelays))
	return n
}

func (m *ProposalData) Size() (n int) {
	var l int
	_ = l
	if m.OrigVal != nil {
		l = len(m.OrigVal)
		n += 1 + l + sovEckv(uint64(l))
	}
	n += 9
	if m.ActualVal != nil {
		l = len(m.ActualVal)
		n += 1 + l + sovEckv(uint64(l))
	}
	n += 9
	n += 2
	n += 2
	n += 2
	return n
}

func (m *Proposal) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovEckv(uint64(l))
	n += 1 + sovEckv(uint64(m.Ver))
	if m.Val != nil {
		l = len(m.Val)
		n += 1 + l + sovEckv(uint64(l))
	}
	n += 1 + sovEckv(uint64(m.StartPropNum))
	n += 2
	n += 2
	return n
}

func (m *ProposalResp) Size() (n int) {
	var l int
	_ = l
	if m.ActualVal != nil {
		l = len(m.ActualVal)
		n += 1 + l + sovEckv(uint64(l))
	}
	n += 2
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovEckv(uint64(l))
		}
	}
	if len(m.LogRepls) > 0 {
		for _, e := range m.LogRepls {
			n += 1 + sovEckv(uint64(e))
		}
	}
	l = m.Meta.Size()
	n += 1 + l + sovEckv(uint64(l))
	return n
}

func (m *PrepareReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovEckv(uint64(l))
	n += 1 + sovEckv(uint64(m.Ver))
	l = m.PropNum.Size()
	n += 1 + l + sovEckv(uint64(l))
	l = m.PropData.Size()
	n += 1 + l + sovEckv(uint64(l))
	l = m.Meta.Size()
	n += 1 + l + sovEckv(uint64(l))
	return n
}

func (m *PrepareResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovEckv(uint64(l))
	n += 1 + sovEckv(uint64(m.Ver))
	l = m.PropNum.Size()
	n += 1 + l + sovEckv(uint64(l))
	n += 2
	l = m.AcceptedPropNum.Size()
	n += 1 + l + sovEckv(uint64(l))
	n += 9
	n += 1 + sovEckv(uint64(m.AcceptedValLen))
	if len(m.AcceptedChunks) > 0 {
		for _, b := range m.AcceptedChunks {
			l = len(b)
			n += 1 + l + sovEckv(uint64(l))
		}
	}
	l = m.HighestPropNum.Size()
	n += 1 + l + sovEckv(uint64(l))
	n += 2
	l = m.PropData.Size()
	n += 1 + l + sovEckv(uint64(l))
	l = m.Meta.Size()
	n += 1 + l + sovEckv(uint64(l))
	return n
}

func (m *AcceptReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovEckv(uint64(l))
	n += 1 + sovEckv(uint64(m.Ver))
	l = m.PropNum.Size()
	n += 1 + l + sovEckv(uint64(l))
	n += 9
	n += 1 + sovEckv(uint64(m.ValLen))
	if len(m.Chunks) > 0 {
		for _, b := range m.Chunks {
			l = len(b)
			n += 1 + l + sovEckv(uint64(l))
		}
	}
	n += 2
	l = m.PropData.Size()
	n += 1 + l + sovEckv(uint64(l))
	l = m.Meta.Size()
	n += 1 + l + sovEckv(uint64(l))
	return n
}

func (m *AcceptResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovEckv(uint64(l))
	n += 1 + sovEckv(uint64(m.Ver))
	l = m.PropNum.Size()
	n += 1 + l + sovEckv(uint64(l))
	n += 2
	l = m.AcceptedPropNum.Size()
	n += 1 + l + sovEckv(uint64(l))
	l = m.Log.Size()
	n += 1 + l + sovEckv(uint64(l))
	l = m.HighestPropNum.Size()
	n += 1 + l + sovEckv(uint64(l))
	n += 2
	l = m.PropData.Size()
	n += 1 + l + sovEckv(uint64(l))
	l = m.Meta.Size()
	n += 1 + l + sovEckv(uint64(l))
	n += 2
	return n
}

func (m *LearnReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovEckv(uint64(l))
	n += 1 + sovEckv(uint64(m.Ver))
	l = m.AcceptedPropNum.Size()
	n += 1 + l + sovEckv(uint64(l))
	n += 9
	n += 1 + sovEckv(uint64(m.AcceptedValLen))
	if len(m.AcceptedChunks) > 0 {
		for _, b := range m.AcceptedChunks {
			l = len(b)
			n += 1 + l + sovEckv(uint64(l))
		}
	}
	n += 1 + sovEckv(uint64(m.MinKeepVer))
	return n
}

func (m *LearnResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LogReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovEckv(uint64(l))
	return n
}

func (m *LogResp) Size() (n int) {
	var l int
	_ = l
	l = m.Log.Size()
	n += 1 + l + sovEckv(uint64(l))
	return n
}

func sovEckv(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEckv(x uint64) (n int) {
	return sovEckv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposalNum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			m.Src = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Src = uint32(dAtA[iNdEx-4])
			m.Src |= uint32(dAtA[iNdEx-3]) << 8
			m.Src |= uint32(dAtA[iNdEx-2]) << 16
			m.Src |= uint32(dAtA[iNdEx-1]) << 24
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Del", wireType)
			}
			m.Del = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Del = uint32(dAtA[iNdEx-4])
			m.Del |= uint32(dAtA[iNdEx-3]) << 8
			m.Del |= uint32(dAtA[iNdEx-2]) << 16
			m.Del |= uint32(dAtA[iNdEx-1]) << 24
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaxosLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaxosLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaxosLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, &PaxosState{})
			if err := m.Versions[len(m.Versions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVer", wireType)
			}
			m.MinVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVer", wireType)
			}
			m.MaxVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaxosState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaxosState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaxosState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestPropNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HighestPropNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedPropNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AcceptedPropNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedValId", wireType)
			}
			m.AcceptedValId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.AcceptedValId = uint64(dAtA[iNdEx-8])
			m.AcceptedValId |= uint64(dAtA[iNdEx-7]) << 8
			m.AcceptedValId |= uint64(dAtA[iNdEx-6]) << 16
			m.AcceptedValId |= uint64(dAtA[iNdEx-5]) << 24
			m.AcceptedValId |= uint64(dAtA[iNdEx-4]) << 32
			m.AcceptedValId |= uint64(dAtA[iNdEx-3]) << 40
			m.AcceptedValId |= uint64(dAtA[iNdEx-2]) << 48
			m.AcceptedValId |= uint64(dAtA[iNdEx-1]) << 56
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedValLen", wireType)
			}
			m.AcceptedValLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AcceptedValLen |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedChunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedChunks = append(m.AcceptedChunks, make([]byte, postIndex-iNdEx))
			copy(m.AcceptedChunks[len(m.AcceptedChunks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chosen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Chosen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val[:0], dAtA[iNdEx:postIndex]...)
			if m.Val == nil {
				m.Val = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val[:0], dAtA[iNdEx:postIndex]...)
			if m.Val == nil {
				m.Val = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CASReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CASReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CASReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.New = append(m.New[:0], dAtA[iNdEx:postIndex]...)
			if m.New == nil {
				m.New = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Old = append(m.Old[:0], dAtA[iNdEx:postIndex]...)
			if m.Old == nil {
				m.Old = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CVASReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CVASReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CVASReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.New = append(m.New[:0], dAtA[iNdEx:postIndex]...)
			if m.New == nil {
				m.New = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CASResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CASResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CASResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumMesgDelays", wireType)
			}
			m.NumMesgDelays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumMesgDelays |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigVal = append(m.OrigVal[:0], dAtA[iNdEx:postIndex]...)
			if m.OrigVal == nil {
				m.OrigVal = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigValId", wireType)
			}
			m.OrigValId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.OrigValId = uint64(dAtA[iNdEx-8])
			m.OrigValId |= uint64(dAtA[iNdEx-7]) << 8
			m.OrigValId |= uint64(dAtA[iNdEx-6]) << 16
			m.OrigValId |= uint64(dAtA[iNdEx-5]) << 24
			m.OrigValId |= uint64(dAtA[iNdEx-4]) << 32
			m.OrigValId |= uint64(dAtA[iNdEx-3]) << 40
			m.OrigValId |= uint64(dAtA[iNdEx-2]) << 48
			m.OrigValId |= uint64(dAtA[iNdEx-1]) << 56
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActualVal = append(m.ActualVal[:0], dAtA[iNdEx:postIndex]...)
			if m.ActualVal == nil {
				m.ActualVal = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualValId", wireType)
			}
			m.ActualValId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.ActualValId = uint64(dAtA[iNdEx-8])
			m.ActualValId |= uint64(dAtA[iNdEx-7]) << 8
			m.ActualValId |= uint64(dAtA[iNdEx-6]) << 16
			m.ActualValId |= uint64(dAtA[iNdEx-5]) << 24
			m.ActualValId |= uint64(dAtA[iNdEx-4]) << 32
			m.ActualValId |= uint64(dAtA[iNdEx-3]) << 40
			m.ActualValId |= uint64(dAtA[iNdEx-2]) << 48
			m.ActualValId |= uint64(dAtA[iNdEx-1]) << 56
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Present", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Present = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendLogs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendLogs = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcIfSucc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GcIfSucc = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val[:0], dAtA[iNdEx:postIndex]...)
			if m.Val == nil {
				m.Val = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPropNum", wireType)
			}
			m.StartPropNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPropNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendLogs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendLogs = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcIfSucc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GcIfSucc = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActualVal = append(m.ActualVal[:0], dAtA[iNdEx:postIndex]...)
			if m.ActualVal == nil {
				m.ActualVal = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidGc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DidGc = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, PaxosLog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEckv
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LogRepls = append(m.LogRepls, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEckv
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEckv
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEckv
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LogRepls = append(m.LogRepls, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LogRepls", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedPropNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AcceptedPropNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedValId", wireType)
			}
			m.AcceptedValId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.AcceptedValId = uint64(dAtA[iNdEx-8])
			m.AcceptedValId |= uint64(dAtA[iNdEx-7]) << 8
			m.AcceptedValId |= uint64(dAtA[iNdEx-6]) << 16
			m.AcceptedValId |= uint64(dAtA[iNdEx-5]) << 24
			m.AcceptedValId |= uint64(dAtA[iNdEx-4]) << 32
			m.AcceptedValId |= uint64(dAtA[iNdEx-3]) << 40
			m.AcceptedValId |= uint64(dAtA[iNdEx-2]) << 48
			m.AcceptedValId |= uint64(dAtA[iNdEx-1]) << 56
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedValLen", wireType)
			}
			m.AcceptedValLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AcceptedValLen |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedChunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedChunks = append(m.AcceptedChunks, make([]byte, postIndex-iNdEx))
			copy(m.AcceptedChunks[len(m.AcceptedChunks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestPropNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HighestPropNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidGc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DidGc = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValId", wireType)
			}
			m.ValId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.ValId = uint64(dAtA[iNdEx-8])
			m.ValId |= uint64(dAtA[iNdEx-7]) << 8
			m.ValId |= uint64(dAtA[iNdEx-6]) << 16
			m.ValId |= uint64(dAtA[iNdEx-5]) << 24
			m.ValId |= uint64(dAtA[iNdEx-4]) << 32
			m.ValId |= uint64(dAtA[iNdEx-3]) << 40
			m.ValId |= uint64(dAtA[iNdEx-2]) << 48
			m.ValId |= uint64(dAtA[iNdEx-1]) << 56
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValLen", wireType)
			}
			m.ValLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValLen |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunks = append(m.Chunks, make([]byte, postIndex-iNdEx))
			copy(m.Chunks[len(m.Chunks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendLog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendLog = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedPropNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AcceptedPropNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestPropNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HighestPropNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidGc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DidGc = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareFailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrepareFailed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LearnReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LearnReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LearnReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedPropNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AcceptedPropNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedValId", wireType)
			}
			m.AcceptedValId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.AcceptedValId = uint64(dAtA[iNdEx-8])
			m.AcceptedValId |= uint64(dAtA[iNdEx-7]) << 8
			m.AcceptedValId |= uint64(dAtA[iNdEx-6]) << 16
			m.AcceptedValId |= uint64(dAtA[iNdEx-5]) << 24
			m.AcceptedValId |= uint64(dAtA[iNdEx-4]) << 32
			m.AcceptedValId |= uint64(dAtA[iNdEx-3]) << 40
			m.AcceptedValId |= uint64(dAtA[iNdEx-2]) << 48
			m.AcceptedValId |= uint64(dAtA[iNdEx-1]) << 56
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedValLen", wireType)
			}
			m.AcceptedValLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AcceptedValLen |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedChunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedChunks = append(m.AcceptedChunks, make([]byte, postIndex-iNdEx))
			copy(m.AcceptedChunks[len(m.AcceptedChunks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinKeepVer", wireType)
			}
			m.MinKeepVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinKeepVer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LearnResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LearnResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LearnResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEckv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEckv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEckv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEckv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEckv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEckv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEckv
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEckv
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEckv(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEckv = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEckv   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("eckv.proto", fileDescriptorEckv) }

var fileDescriptorEckv = []byte{
	// 1160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0xcd, 0x72, 0xe3, 0x44,
	0x10, 0x8e, 0x2c, 0x45, 0x3f, 0x6d, 0x3b, 0x64, 0xe7, 0xb0, 0x65, 0x36, 0xac, 0xd7, 0xab, 0xda,
	0x0a, 0x2e, 0x08, 0xd9, 0xc2, 0x14, 0x37, 0x2e, 0x59, 0x07, 0x52, 0xa9, 0x78, 0xa9, 0x94, 0x53,
	0xf8, 0xc0, 0x45, 0x35, 0x91, 0x26, 0x8a, 0x2a, 0xfa, 0x43, 0x23, 0x79, 0x93, 0xb7, 0xe0, 0xc8,
	0x91, 0xe2, 0x01, 0x78, 0x05, 0x38, 0x86, 0x1b, 0x1c, 0xb8, 0x52, 0x90, 0x3c, 0x00, 0x8f, 0x00,
	0x35, 0x23, 0x8d, 0x2d, 0x25, 0x76, 0x62, 0x2f, 0xc5, 0x1e, 0xf6, 0xe6, 0xe9, 0xfe, 0xba, 0x3d,
	0xfd, 0xf5, 0xcf, 0xb4, 0x00, 0x88, 0x7d, 0x36, 0xde, 0x8e, 0x93, 0x28, 0x8d, 0x90, 0xc2, 0x7e,
	0x3f, 0xfa, 0xc8, 0xf5, 0xd2, 0xd3, 0xec, 0x78, 0xdb, 0x8e, 0x82, 0xe7, 0x6e, 0xe4, 0x46, 0xcf,
	0xb9, 0xf2, 0x38, 0x3b, 0xe1, 0x27, 0x7e, 0xe0, 0xbf, 0x72, 0x23, 0xf3, 0x2b, 0xa8, 0x1f, 0x26,
	0x51, 0x1c, 0x51, 0xec, 0x7f, 0x99, 0x05, 0xe8, 0x21, 0xc8, 0x61, 0x16, 0xb4, 0xa4, 0x8e, 0xd4,
	0x95, 0x5f, 0x28, 0x97, 0x7f, 0x3c, 0x59, 0x19, 0x32, 0x01, 0x93, 0xd3, 0xc4, 0x6e, 0xd5, 0x3a,
	0x52, 0x57, 0x13, 0x72, 0x9a, 0xd8, 0x4c, 0xee, 0x10, 0xbf, 0x25, 0x97, 0xe5, 0x0e, 0xf1, 0xcd,
	0x31, 0xe8, 0x87, 0xf8, 0x3c, 0xa2, 0x83, 0xc8, 0x45, 0x5b, 0xa0, 0x8f, 0x49, 0x42, 0xbd, 0x28,
	0xa4, 0x2d, 0xa9, 0x23, 0x77, 0xeb, 0xbd, 0xf5, 0x6d, 0x7e, 0x6d, 0x8e, 0x38, 0x4a, 0x71, 0x4a,
	0x86, 0x13, 0x04, 0x7a, 0x0c, 0x5a, 0xe0, 0x85, 0xd6, 0x98, 0x24, 0xfc, 0xdf, 0xc4, 0x2d, 0xd4,
	0xc0, 0x0b, 0x47, 0x24, 0xe1, 0x6a, 0x7c, 0xce, 0xd5, 0x72, 0x45, 0x8d, 0xcf, 0x47, 0x24, 0x31,
	0x7f, 0xab, 0x01, 0x4c, 0xdd, 0xb2, 0xeb, 0x31, 0x64, 0x25, 0x9c, 0x31, 0x49, 0xd0, 0x0e, 0xac,
	0x9f, 0x7a, 0xee, 0x29, 0xa1, 0xa9, 0x15, 0x27, 0x51, 0x6c, 0xb1, 0x98, 0xd9, 0xbf, 0xd5, 0x7b,
	0x0f, 0x8a, 0xab, 0x4d, 0x39, 0x29, 0xec, 0xd6, 0x0a, 0x03, 0xa6, 0x61, 0x4c, 0xf5, 0xe1, 0x01,
	0xb6, 0x6d, 0x12, 0xa7, 0xc4, 0x99, 0xfa, 0x90, 0xef, 0xf6, 0xf1, 0x8e, 0xb0, 0x10, 0x4e, 0xb6,
	0x60, 0x22, 0xb2, 0xc6, 0xd8, 0xb7, 0x3c, 0xa7, 0xa5, 0x74, 0xa4, 0xae, 0x5a, 0xe0, 0x9b, 0x42,
	0x39, 0xc2, 0xfe, 0xbe, 0x83, 0xb6, 0x61, 0xbd, 0x82, 0xf6, 0x49, 0xd8, 0x5a, 0x2d, 0x85, 0xb6,
	0x56, 0x82, 0x0f, 0x48, 0x88, 0xde, 0x2f, 0x79, 0xb7, 0x4f, 0xb3, 0xf0, 0x8c, 0xb6, 0xd4, 0x8e,
	0xdc, 0x6d, 0x4c, 0x81, 0x7d, 0x2e, 0x45, 0xef, 0x81, 0x6a, 0x9f, 0x46, 0x94, 0x84, 0x2d, 0xad,
	0x23, 0x75, 0x75, 0xc1, 0x69, 0x2e, 0x33, 0x3b, 0xa0, 0xee, 0x91, 0x74, 0x48, 0xbe, 0x61, 0x74,
	0x9e, 0x91, 0x0b, 0x4e, 0xa7, 0x21, 0xe8, 0x3c, 0x23, 0x17, 0xe6, 0x27, 0xa0, 0x71, 0x04, 0x8d,
	0xd1, 0x3a, 0xc8, 0x63, 0xec, 0x73, 0x32, 0x1b, 0x43, 0xf6, 0x53, 0xe4, 0x40, 0x2e, 0x1b, 0x8d,
	0x49, 0x62, 0xf6, 0x40, 0x3d, 0xcc, 0xee, 0x72, 0x7b, 0xdb, 0x97, 0xf9, 0x14, 0x34, 0x6e, 0x43,
	0xe3, 0x72, 0x6a, 0x2b, 0x6e, 0x77, 0x41, 0xed, 0xef, 0x1c, 0xdd, 0xe3, 0x36, 0x24, 0xaf, 0x84,
	0xdb, 0x90, 0xbc, 0x62, 0x92, 0xc8, 0x77, 0xf8, 0x15, 0x1b, 0x43, 0xf6, 0xd3, 0x3c, 0x00, 0xad,
	0x3f, 0x5a, 0xd6, 0xcd, 0xbc, 0x48, 0x77, 0x40, 0xe3, 0x57, 0xa2, 0x31, 0x6a, 0x83, 0x46, 0x33,
	0xdb, 0x26, 0x94, 0x72, 0x87, 0x82, 0x6a, 0x21, 0x14, 0x2e, 0x6a, 0x37, 0x5d, 0x7c, 0x06, 0x0d,
	0x51, 0x4e, 0x2f, 0x49, 0x8a, 0x59, 0xe1, 0x84, 0x59, 0x60, 0x05, 0x84, 0xba, 0x96, 0x43, 0x7c,
	0x7c, 0x91, 0xfb, 0x6b, 0x8a, 0xc2, 0x09, 0xb3, 0xe0, 0x25, 0xa1, 0xee, 0x2e, 0x57, 0x99, 0xff,
	0x48, 0x53, 0xf3, 0x5d, 0x9c, 0x62, 0xf4, 0x2e, 0xe8, 0x51, 0xe2, 0xb9, 0xac, 0x8a, 0xb8, 0x5d,
	0x63, 0xa8, 0xb1, 0xf3, 0x08, 0xfb, 0xe8, 0x19, 0xd4, 0x85, 0x8a, 0x95, 0x63, 0xad, 0x54, 0x8e,
	0x46, 0x81, 0xd9, 0x77, 0xd0, 0x63, 0x00, 0x6c, 0xa7, 0x19, 0xf6, 0xb9, 0x8b, 0x9c, 0x38, 0x23,
	0x97, 0x30, 0x27, 0x5d, 0x68, 0x4e, 0xd5, 0x37, 0xab, 0xba, 0x3e, 0xc1, 0xed, 0x3b, 0x8c, 0x90,
	0x38, 0x21, 0x94, 0x84, 0x29, 0x2f, 0xe5, 0x09, 0x21, 0x85, 0x10, 0x3d, 0x05, 0x83, 0x92, 0xd0,
	0xb1, 0xfc, 0xc8, 0x65, 0xd5, 0x3b, 0x45, 0xe8, 0x4c, 0x3c, 0x88, 0x5c, 0x8a, 0x4c, 0x00, 0xd7,
	0xb6, 0xbc, 0x13, 0x8b, 0x91, 0x58, 0xa9, 0x60, 0xdd, 0xb5, 0xf7, 0x4f, 0x8e, 0x32, 0xdb, 0x36,
	0x7f, 0x92, 0x40, 0x17, 0x0c, 0xcc, 0xcd, 0x68, 0x89, 0xfc, 0xca, 0xb4, 0x28, 0xea, 0x50, 0x9e,
	0xd6, 0xf4, 0x07, 0xb0, 0x46, 0x53, 0x9c, 0x94, 0xa6, 0x87, 0x52, 0x32, 0x6a, 0x70, 0x9d, 0xe8,
	0xf1, 0x4a, 0x04, 0xab, 0x0b, 0x44, 0xa0, 0xce, 0x8b, 0x60, 0x92, 0x43, 0x5e, 0x4a, 0xd5, 0x14,
	0x48, 0x37, 0x53, 0xb0, 0x01, 0xaa, 0xe3, 0x39, 0x96, 0x9b, 0x0f, 0x6d, 0xe1, 0x6f, 0xd5, 0xf1,
	0x9c, 0x3d, 0x1b, 0x75, 0x41, 0xe1, 0xd7, 0x91, 0xf9, 0x38, 0x5e, 0x2b, 0x8d, 0xe3, 0x41, 0xe4,
	0x16, 0x50, 0x8e, 0x40, 0x1b, 0x60, 0xf8, 0x91, 0x6b, 0x25, 0x24, 0xf6, 0x69, 0x4b, 0xe9, 0xc8,
	0xdd, 0xe6, 0x50, 0xf7, 0x23, 0x77, 0xc8, 0xce, 0x68, 0x0b, 0x94, 0x80, 0xa4, 0x98, 0x47, 0x55,
	0xef, 0xa1, 0xea, 0xd8, 0x63, 0x75, 0x2a, 0x5c, 0x31, 0x94, 0xf9, 0xbb, 0x04, 0x70, 0x98, 0x90,
	0x18, 0x27, 0xe4, 0xae, 0xbe, 0x9a, 0x97, 0x85, 0x1e, 0xe8, 0x8b, 0xce, 0x59, 0x2d, 0x2e, 0xb8,
	0xff, 0x14, 0x0c, 0x6e, 0xe3, 0xe0, 0x14, 0xf3, 0x14, 0xdd, 0xba, 0x25, 0x6b, 0x07, 0xc1, 0x35,
	0x83, 0xf2, 0xf6, 0x58, 0x2e, 0xae, 0x1f, 0x14, 0xf6, 0x86, 0x16, 0x71, 0xe5, 0x93, 0xe9, 0x7f,
	0x0f, 0xac, 0x34, 0x47, 0x94, 0x59, 0x73, 0x64, 0xe6, 0xeb, 0xb4, 0xfa, 0xdf, 0x5f, 0x27, 0x75,
	0xb9, 0xd7, 0x49, 0x5b, 0xee, 0x75, 0xd2, 0x67, 0xbe, 0x4e, 0xb3, 0x1e, 0x6b, 0x63, 0xb9, 0xc7,
	0x7a, 0xda, 0x0c, 0x70, 0xbb, 0x19, 0x2a, 0x45, 0x52, 0x5f, 0xba, 0x48, 0x1a, 0x0b, 0x15, 0xc9,
	0x2f, 0x35, 0x30, 0x76, 0x78, 0x5c, 0x6f, 0xaa, 0xf6, 0x37, 0x40, 0x9d, 0x31, 0x7c, 0x57, 0xc7,
	0xc5, 0xfc, 0xd6, 0x66, 0x6d, 0x10, 0xcc, 0x82, 0xe5, 0xe6, 0x21, 0x5b, 0x08, 0x4a, 0x0b, 0x43,
	0x71, 0x42, 0x4f, 0x40, 0x17, 0xb3, 0xac, 0x32, 0x68, 0xb5, 0x62, 0x94, 0x55, 0xb9, 0xd4, 0x97,
	0xe6, 0xd2, 0x58, 0x88, 0xcb, 0xbf, 0x65, 0x00, 0xc1, 0xe5, 0xdb, 0xd4, 0x6f, 0x9b, 0x20, 0x33,
	0x62, 0x55, 0x6e, 0x36, 0x7b, 0x28, 0x33, 0xc0, 0xcc, 0x86, 0xd0, 0x5e, 0xb7, 0x21, 0xf4, 0x7b,
	0x1a, 0xc2, 0x58, 0x3a, 0x89, 0xb0, 0x48, 0x12, 0xd1, 0x87, 0xb0, 0x16, 0xe7, 0x43, 0xd3, 0x3a,
	0xc1, 0x9e, 0x4f, 0x1c, 0xde, 0x7a, 0xe2, 0x26, 0xcd, 0x42, 0xf7, 0x05, 0x57, 0x99, 0x3f, 0xd6,
	0x40, 0x1f, 0x10, 0x9c, 0x84, 0xaf, 0xd3, 0x3c, 0x6f, 0xd3, 0xa6, 0xbe, 0x09, 0x0d, 0xf6, 0x75,
	0x74, 0x46, 0x48, 0xcc, 0xbf, 0x81, 0xca, 0x03, 0x16, 0x02, 0x2f, 0x3c, 0x20, 0x24, 0x66, 0xdf,
	0x41, 0x75, 0x30, 0x0a, 0xbe, 0x68, 0xcc, 0x16, 0xf8, 0x01, 0x7b, 0xb2, 0xe7, 0x2f, 0xf0, 0x1f,
	0x83, 0xc6, 0x11, 0x34, 0x16, 0x45, 0x28, 0xdd, 0x53, 0x84, 0xbd, 0xef, 0x25, 0x50, 0x3e, 0xef,
	0x1f, 0x8c, 0xd0, 0x33, 0x90, 0xf7, 0x48, 0x8a, 0x1a, 0x39, 0x34, 0xff, 0x52, 0x78, 0xd4, 0x2c,
	0x9d, 0x68, 0x6c, 0xae, 0x30, 0xd4, 0x61, 0x36, 0x41, 0xe5, 0x8b, 0xbf, 0x40, 0x15, 0x2b, 0x7d,
	0x8e, 0xea, 0xef, 0x1c, 0x09, 0x54, 0xbe, 0xc7, 0x0b, 0x54, 0xb1, 0x42, 0x9b, 0x2b, 0x68, 0x13,
	0x14, 0xb6, 0x9c, 0x23, 0xa1, 0x18, 0xcd, 0xc6, 0xbd, 0xe8, 0x5c, 0xfe, 0xd5, 0x96, 0x2e, 0xaf,
	0xda, 0xd2, 0xaf, 0x57, 0x6d, 0xe9, 0xcf, 0xab, 0xb6, 0xf4, 0xed, 0x75, 0x7b, 0xe5, 0xbb, 0xeb,
	0xf6, 0xca, 0xcf, 0xd7, 0x6d, 0xe9, 0xeb, 0x5a, 0x7c, 0xfc, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xce, 0xe4, 0xa8, 0xfe, 0x3f, 0x0f, 0x00, 0x00,
}
